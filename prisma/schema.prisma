generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  role UserRole @default(USER)

  accounts    Account[]
  sessions    Session[]
  ListedBooks ListedBook[]
}

enum Branch {
  MECH
  ENI
  EEE
  ECE
  CS
}

enum BookAge {
  ALMOST_NEW
  LESS_THAN_2
  LESS_THAN_4
  LESS_THAN_6
  LESS_THAN_8
  MORE_THAN_8
}

enum Status {
  NOT_SOLD
  SOLD
}

model ListedBook {
  id              String   @id @default(cuid())
  bookName        String
  requiredInYear  Int
  courseOrSubject String?
  branch          Branch?
  bookAge         BookAge?
  price           Float

  sellerPhone String
  sellerId    String
  seller      User   @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  status      Status @default(NOT_SOLD)
}
